fastlane_version "2.72.0"
default_platform :ios

ATCH_GIT_URL = 'https://github.com/elpassion/apple-match-elpassion-standard.git'
APP_IDENTIFIER = 'pl.elpassion.ELSpace'
DEV_TEAM_ID = 'H5QFB36W2F'
ITC_TEAM_ID = '119106237'
APP_SCHEME = 'ELSpace'
UNIT_TEST_SCHEME = 'ELSpaceTests'
XC_WORKSPACE = 'ELSpace.xcworkspace'
XC_PROJECT = 'ELSpace.xcodeproj'

platform :ios do

  before_all do
    cocoapods
  end

  desc 'Run unit tests'
  lane :unit_test do
    scan(
      scheme: UNIT_TEST_SCHEME,
      device: 'iPhone 8'
    )
  end

  desc 'Bump build number'
  lane :bump do
    ensure_git_status_clean
    version = get_version_number
    build_number = get_build_number(xcodeproj: XC_PROJECT).to_i + 1
    increment_build_number(build_number: "#{build_number}")
    commit_version_bump(xcodeproj: XC_PROJECT)
    add_git_tag(tag: 'v' + "#{version}" + '_' + "#{build_number}")
  end

  desc 'Deploy to TestFLight'
  lane :beta_tf do
    ensure_git_status_clean
    unit_test
    gym(scheme: APP_SCHEME, clean: true)
    pilot(
      app_identifier: APP_IDENTIFIER,
      dev_portal_team_id: DEV_TEAM_ID,
      team_id: ITC_TEAM_ID,
      skip_waiting_for_build_processing: true,
      skip_submission: true
    )
  end

  desc 'Deploy to Crashlitics'
  lane :beta_crashlitics do
    ensure_git_status_clean
    unit_test
    gym(scheme: APP_SCHEME, export_method: "ad-hoc", clean: true)
    crashlytics(
    api_token: "53859ed3accb8c102a036c6fd358b4d2aa083555",
    build_secret: "e8aab39ec7b0a1a97829840c7fd6a04bbd899ec39910574361faf1d5f1bdf0db"
  )
  end

  desc "Auto deploy to TestFlight if merges pull request"  
  lane :autodeploy do  
    if merges_pull_request
      # increment build number
      version = get_version_number
      latestBuildNumber = latest_testflight_build_number(version: version)
      build_number = latestBuildNumber + 1
      increment_build_number(build_number: "#{build_number}")
      # create a new keychain
      password = SecureRandom.base64
      keychain_name = "fastlane"
      ENV["MATCH_KEYCHAIN_NAME"] = keychain_name
      ENV["MATCH_KEYCHAIN_PASSWORD"] = password

      create_keychain(
        name: keychain_name,
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: true,
        password: password
      )

      # fetch provisioning profile
      match(
        type: "appstore",
        keychain_name: keychain_name,
        keychain_password: password,
        readonly: true
      )

      # build the app
      gym(scheme: "ELSpace", clean: true)

      # upload to TestFlight
      pilot(skip_waiting_for_build_processing: true)
    end
  end  

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(message: "Successfully deployed new Beta version (" + get_version_number + ") of ELSpace.")
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
